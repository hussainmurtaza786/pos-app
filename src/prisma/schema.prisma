// This is your Prisma schema file
// Learn more at: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  // url      = env("DATABASE_URL")
  url      = env("POSTGRES_PRISMA_POOL_URL")
}

//////////////////////////////////////////////////
// MODELS
//////////////////////////////////////////////////

model User {
  id        String    @id @default(cuid())
  email     String?   @unique
  phone     String?   @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  userRole  UserRole  @default(Staff)

  inventories Inventory[]
  orders      Order[]
  expenses    Expense[]
  products    Product[]
  ReturnOrder ReturnOrder[]
  Category    Category[]
}

model Product {
  id          String  @id @default(cuid())
  sku         String
  name        String
  description String?
  price       Float

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  Inventory            Inventory[]
  ProductInOrder       ProductInOrder[]
  ProductInReturnOrder ReturnOrderProduct[]

  // ✅ SKU unique per user (not global)
  @@unique([sku, createdById])
  @@index([name])
}

model Inventory {
  id                String  @id @default(cuid())
  description       String?
  purchasedQuantity Int
  availableQuantity Int
  purchasePrice     Int

  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String

  productId      String
  product        Product          @relation(fields: [productId], references: [id])
  ProductInOrder ProductInOrder[]
}

model Order {
  id             Int     @id @default(autoincrement())
  description    String?
  discount       Float
  amountReceived Float
  status         Status?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  ProductInOrder ProductInOrder[]
}

model ProductInOrder {
  orderId     Int
  productId   String
  inventoryId String?
  quantity    Int
  sellPrice   Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  order     Order      @relation(fields: [orderId], references: [id])
  product   Product    @relation(fields: [productId], references: [id])
  inventory Inventory? @relation(fields: [inventoryId], references: [id])

  @@id([orderId, productId])
}

model ReturnOrder {
  id           Int       @id @default(autoincrement())
  description  String?
  returnAmount Float
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  createdBy   User?   @relation(fields: [createdById], references: [id])
  createdById String?

  ReturnOrderProduct ReturnOrderProduct[]
}

model ReturnOrderProduct {
  returnOrderId Int
  productId     String
  quantity      Int
  sellPrice     Float
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt

  product     Product      @relation(fields: [productId], references: [id])
  ReturnOrder ReturnOrder? @relation(fields: [returnOrderId], references: [id])

  @@id([returnOrderId, productId])
}

model Expense {
  id        String    @id @default(uuid())
  reason    String?
  amount    Float
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([reason])
}

model Category {
  id          String    @id @default(uuid())
  name        String
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  products Product[]

  // ✅ Category name unique per user (not global)
  @@unique([name, createdById])
}

//////////////////////////////////////////////////
// ENUMS
//////////////////////////////////////////////////

enum UserRole {
  Admin
  Staff
}

enum Status {
  Pending
  Completed
}
